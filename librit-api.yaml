openapi: 3.0.3
info:
  title: LibrIT API
  description: |
    **LibrIT API** provides endpoints to manage books and authors in a library system. 
    This API is powered by a JSON Server mock backend, supporting standard REST operations, filtering, sorting, and pagination.

    ### Features
    - **Book Management**: Create, read, update, and delete books.
    - **Author Management**: Create, read, update, and delete authors.
    - **Search & Filter**: Search books by title, author, genre, or full-text query.
    - **Pagination & Sorting**: Paginate and sort results using query parameters.

    For support, contact the team at [duczuyvu12@gmail.com](mailto:duczuyvu12@gmail.com).
  version: 1.0.0
  contact:
    name: Support Team
    email: duczuyvu12@gmail.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  x-logo:
    url: https://i.postimg.cc/HnXtGkxG/librit.png
    altText: LibrIT API Logo

servers:
  - url: http://localhost:4010
    description: JSON Server Mock (Local Development)

paths:
  /books:
    get:
      summary: Retrieve a list of books
      description: |
        Fetches a list of books with optional filtering, searching, pagination, and sorting.
        - **Search**: Use `q` for full-text search across all fields.
        - **Filter**: Filter by `title`, `author`, or `genre`.
        - **Pagination**: Use `_page` and `_limit` to paginate results.
        - **Sorting**: Use `_sort` and `_order` to sort results (e.g., `_sort=title&_order=asc`).
      tags:
        - Books
      parameters:
        - name: q
          in: query
          required: false
          schema:
            type: string
          description: Full-text search keyword (e.g., "Alchemist")
          example: "Alchemist"
        - name: title
          in: query
          required: false
          schema:
            type: string
          description: Filter by exact book title
          example: "The Alchemist"
        - name: author
          in: query
          required: false
          schema:
            type: string
          description: Filter by exact author name
          example: "Paulo Coelho"
        - name: genre
          in: query
          required: false
          schema:
            type: string
          description: Filter by exact genre
          example: "Novel"
        - name: _page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
          description: Page number for pagination
          example: 1
        - name: _limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
          description: Number of items per page
          example: 10
        - name: _sort
          in: query
          required: false
          schema:
            type: string
          description: Field to sort by (e.g., "title", "publishedYear")
          example: "title"
        - name: _order
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
          description: Sort order (ascending or descending)
          example: "asc"
      responses:
        '200':
          description: Successfully retrieved books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
              example:
                - id: 1
                  title: "How to Win Friends and Influence People"
                  author: "Dale Carnegie"
                  genre: "Self-help"
                  publishedYear: 1936
                  isbn: "978-0-671-02703-2"
                  status: "available"
                  description: "A book about the art of winning people over"
                - id: 2
                  title: "The Alchemist"
                  author: "Paulo Coelho"
                  genre: "Novel"
                  publishedYear: 1988
                  isbn: "978-0061122415"
                  status: "borrowed"
                  description: "A journey to find treasure and the meaning of life"
        '400':
          $ref: '#/components/responses/ValidationError'

    post:
      summary: Create a new book
      description: |
        Creates a new book in the library. Required fields are `title` and `author`. 
        JSON Server automatically assigns an `id` to the new book.
      tags:
        - Books
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
            example:
              title: "The Alchemist"
              author: "Paulo Coelho"
              genre: "Novel"
              publishedYear: 1988
              isbn: "978-0061122415"
              status: "available"
              description: "A journey to find treasure and the meaning of life"
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
              example:
                id: 3
                title: "The Alchemist"
                author: "Paulo Coelho"
                genre: "Novel"
                publishedYear: 1988
                isbn: "978-0061122415"
                status: "available"
                description: "A journey to find treasure and the meaning of life"
        '400':
          $ref: '#/components/responses/ValidationError'

  /books/{id}:
    get:
      summary: Get a book by ID
      description: Retrieves details of a specific book by its ID.
      tags:
        - Books
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: Unique ID of the book
          example: 1
      responses:
        '200':
          description: Successfully retrieved book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
              example:
                id: 1
                title: "How to Win Friends and Influence People"
                author: "Dale Carnegie"
                genre: "Self-help"
                publishedYear: 1936
                isbn: "978-0-671-02703-2"
                status: "available"
                description: "A book about the art of winning people over"
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      summary: Update a book
      description: |
        Updates a book by replacing all fields. Use `PATCH` for partial updates.
        All fields in `BookInput` are optional for JSON Server compatibility.
      tags:
        - Books
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: Unique ID of the book
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
            example:
              title: "How to Win Friends and Influence People"
              author: "Dale Carnegie"
              genre: "Self-help"
              publishedYear: 1936
              isbn: "978-0-671-02703-2"
              status: "available"
              description: "Updated description"
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
              example:
                id: 1
                title: "How to Win Friends and Influence People"
                author: "Dale Carnegie"
                genre: "Self-help"
                publishedYear: 1936
                isbn: "978-0-671-02703-2"
                status: "available"
                description: "Updated description"
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/ValidationError'

    patch:
      summary: Partially update a book
      description: |
        Partially updates a book. Only provided fields are updated.
        JSON Server supports partial updates with `PATCH`.
      tags:
        - Books
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: Unique ID of the book
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
            example:
              description: "Updated description for partial update"
      responses:
        '200':
          description: Book partially updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
              example:
                id: 1
                title: "How to Win Friends and Influence People"
                author: "Dale Carnegie"
                genre: "Self-help"
                publishedYear: 1936
                isbn: "978-0-671-02703-2"
                status: "available"
                description: "Updated description for partial update"
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/ValidationError'

    delete:
      summary: Delete a book
      description: Deletes a book by its ID.
      tags:
        - Books
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: Unique ID of the book
          example: 1
      responses:
        '204':
          description: Book deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
              example:
                id: 1
                title: "How to Win Friends and Influence People"
                author: "Dale Carnegie"
                genre: "Self-help"
                publishedYear: 1936
                isbn: "978-0-671-02703-2"
                status: "available"
                description: "Updated description for partial update"
        '404':
          $ref: '#/components/responses/NotFound'

  /authors:
    get:
      summary: Retrieve a list of authors
      description: |
        Fetches a list of authors with optional filtering, pagination, and sorting.
        - **Filter**: Filter by `name` or `nationality`.
        - **Pagination**: Use `_page` and `_limit` to paginate results.
        - **Sorting**: Use `_sort` and `_order` to sort results (e.g., `_sort=name&_order=asc`).
      tags:
        - Authors
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: string
          description: Filter by exact author name
          example: "Nguyen Nhat Anh"
        - name: nationality
          in: query
          required: false
          schema:
            type: string
          description: Filter by exact nationality
          example: "Vietnamese"
        - name: _page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
          description: Page number for pagination
          example: 1
        - name: _limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
          description: Number of items per page
          example: 10
        - name: _sort
          in: query
          required: false
          schema:
            type: string
          description: Field to sort by (e.g., "name", "birthYear")
          example: "name"
        - name: _order
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
          description: Sort order (ascending or descending)
          example: "asc"
      responses:
        '200':
          description: Successfully retrieved authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
              example:
                - id: 1
                  name: "Nguyen Nhat Anh"
                  nationality: "Vietnamese"
                  birthYear: 1955
                - id: 2
                  name: "Paulo Coelho"
                  nationality: "Brazilian"
                  birthYear: 1947
        '400':
          $ref: '#/components/responses/ValidationError'

    post:
      summary: Create a new author
      description: |
        Creates a new author in the library. Required fields are `name` and `nationality`. 
        JSON Server automatically assigns an `id` to the new author.
      tags:
        - Authors
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorInput'
            example:
              name: "J.K. Rowling"
              nationality: "British"
              birthYear: 1965
      responses:
        '201':
          description: Author created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
              example:
                id: 3
                name: "J.K. Rowling"
                nationality: "British"
                birthYear: 1965
        '400':
          $ref: '#/components/responses/ValidationError'

  /authors/{id}:
    get:
      summary: Get an author by ID
      description: Retrieves details of a specific author by their ID.
      tags:
        - Authors
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: Unique ID of the author
          example: 1
      responses:
        '200':
          description: Successfully retrieved author
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
              example:
                id: 1
                name: "Nguyen Nhat Anh"
                nationality: "Vietnamese"
                birthYear: 1955
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      summary: Update an author
      description: |
        Updates an author by replacing all fields. Use `PATCH` for partial updates.
        All fields in `AuthorInput` are optional for JSON Server compatibility.
      tags:
        - Authors
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: Unique ID of the author
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorInput'
            example:
              name: "Nguyen Nhat Anh"
              nationality: "Vietnamese"
              birthYear: 1955
      responses:
        '200':
          description: Author updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
              example:
                id: 1
                name: "Nguyen Nhat Anh"
                nationality: "Vietnamese"
                birthYear: 1955
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/ValidationError'

    patch:
      summary: Partially update an author
      description: |
        Partially updates an author. Only provided fields are updated.
        JSON Server supports partial updates with `PATCH`.
      tags:
        - Authors
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: Unique ID of the author
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorInput'
            example:
              birthYear: 1956
      responses:
        '200':
          description: Author partially updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
              example:
                id: 1
                name: "Nguyen Nhat Anh"
                nationality: "Vietnamese"
                birthYear: 1956
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/ValidationError'

    delete:
      summary: Delete an author
      description: Deletes an author by their ID.
      tags:
        - Authors
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: Unique ID of the author
          example: 1
      responses:
        '204':
          description: Author deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
              example:
                id: 1
                name: "Nguyen Nhat Anh"
                nationality: "Vietnamese"
                birthYear: 1956
        '404':
          $ref: '#/components/responses/NotFound'

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the book (auto-generated by JSON Server)
          example: 1
        title:
          type: string
          description: Title of the book
          example: "How to Win Friends and Influence People"
        author:
          type: string
          description: Name of the author
          example: "Dale Carnegie"
        genre:
          type: string
          description: Genre of the book
          example: "Self-help"
        publishedYear:
          type: integer
          description: Year the book was published
          example: 1936
        isbn:
          type: string
          description: ISBN code of the book
          example: "978-0-671-02703-2"
        status:
          type: string
          enum: [available, borrowed]
          description: Current status of the book
          example: "available"
        description:
          type: string
          description: Brief description of the book
          example: "A book about the art of winning people over"

    BookInput:
      type: object
      properties:
        title:
          type: string
          description: Title of the book (required for POST)
          example: "The Alchemist"
        author:
          type: string
          description: Name of the author (required for POST)
          example: "Paulo Coelho"
        genre:
          type: string
          description: Genre of the book (optional)
          example: "Novel"
        publishedYear:
          type: integer
          description: Year the book was published (optional)
          example: 1988
        isbn:
          type: string
          description: ISBN code of the book (optional)
          example: "978-0061122415"
        status:
          type: string
          description: Status of the book - available or borrowed (optional)
          example: "978-0061122415"
        description:
          type: string
          description: Brief description of the book (optional)
          example: "A journey to find treasure and the meaning of life"
      required:
        - title
        - author

    Author:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the author (auto-generated by JSON Server)
          example: 1
        name:
          type: string
          description: Name of the author
          example: "Nguyen Nhat Anh"
        nationality:
          type: string
          description: Nationality of the author
          example: "Vietnamese"
        birthYear:
          type: integer
          description: Birth year of the author
          example: 1955

    AuthorInput:
      type: object
      properties:
        name:
          type: string
          description: Name of the author (required for POST)
          example: "J.K. Rowling"
        nationality:
          type: string
          description: Nationality of the author (required for POST)
          example: "British"
        birthYear:
          type: integer
          description: Birth year of the author (optional)
          example: 1965
      required:
        - name
        - nationality

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "Invalid input data"
      required:
        - error

  responses:
    NotFound:
      description: The requested resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Resource not found"
    ValidationError:
      description: Invalid input data provided
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Invalid input data"

tags:
  - name: Books
    description: Operations related to book management
  - name: Authors
    description: Operations related to author management
